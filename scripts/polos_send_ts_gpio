#!/usr/bin/env python3
import time
import RPi.GPIO as GPIO
import sys
import logging
from optparse import OptionParser

from polos.protocol import DiscretePwmProtocol

logging.basicConfig(stream=sys.stdout)
logger = logging.getLogger('polos')

def main():
    usage = 'usage: %prog [options] GPIO_NUMBERING GPIO_ID RECEVIER_FREQ'
    description = 'Send the current time stamp (system time) through GPIO ' \
                  'on a raspeberry pi using a software discrete pulse width '\
                  'modulation (PWM) protocol.'

    min_args = 3
    max_args = 3

    parser = OptionParser(usage=usage, description=description)

    parser.add_option('-v', '--verbose', dest='verbose', metavar='VERBOSELEVEL',
                      type='int', default=0,
                      help='Amount of verbosity: '\
                           '0 (NOTSET: quiet, default), '\
                           '50 (CRITICAL), ' \
                           '40 (ERROR), ' \
                           '30 (WARNING), '\
                           '20 (INFO), '\
                           '10 (DEBUG)')
    
    (options, args) = parser.parse_args()
    logger.setLevel(options.verbose)

    nba = len(args)
    if nba < min_args or (max_args >= 0 and nba > max_args):
        parser.print_help()
        return 1

    gpio_mode, gpio_id, sampling_rate = args

    try:
        gpio_id = int(gpio_id)
    except Exception:
        print('Error with GPIO_ID. Must be an integer')
        parser.print_help()
        return 1

    if not (gpio_mode == 'BCM' or gpio_mode == 'BOARD'):
        print('Error with GPIO_MODE. Must either be BCM or BOARD.')
        parser.print_help()
        return 1
    gpio_mode = {'BCM' : GPIO.BCM, 'BOARD' : GPIO.BOARD}[gpio_mode]
        
    try:
        sampling_rate = float(sampling_rate)
        assert(sampling_rate > 0)
    except Exception:
        print('Error with GPIO_ID. Must be stricly positive float number')
        parser.print_help()
        return 1

    logger.info('Initialize GPIO...')
    GPIO.setmode(gpio_mode)
    GPIO.setup(gpio_id, GPIO.OUT, initial=GPIO.LOW)

    sender = DiscretePwmProtocol(precision=6) #TODO: expose precision
    sender.send_timestamp_gpio(gpio_id, sampling_rate)

    logger.info('Cleanup GPIO...')
    GPIO.cleanup(gpio_id)

if __name__=='__main__':
    main()
